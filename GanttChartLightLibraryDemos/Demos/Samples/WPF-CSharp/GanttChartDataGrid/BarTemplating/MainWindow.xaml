<Window x:Class="Demos.WPF.CSharp.GanttChartDataGrid.BarTemplating.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:hdc="clr-namespace:DlhSoft.Windows.Controls;assembly=DlhSoft.HierarchicalData.LightWPF.Controls"
        xmlns:pdgcc="clr-namespace:DlhSoft.Windows.Controls;assembly=DlhSoft.ProjectData.GanttChart.LightWPF.Controls"
        xmlns:local="clr-namespace:Demos.WPF.CSharp.GanttChartDataGrid.BarTemplating"
        Title="GanttChartDataGrid Bar Templating Sample" Width="800" Height="600">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="AppResources.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
    <DockPanel>
        <pdgcc:GanttChartDataGrid x:Name="GanttChartDataGrid" AreSummaryRowsBold="True" StandardBarCornerRadius="1" IsMouseWheelZoomEnabled="False"
                                  Width="800" Height="286" IsRowClickTimeScrollingEnabled="False">
            <!-- Define the custom bar template for standard tasks. -->
            <pdgcc:GanttChartDataGrid.StandardTaskTemplate>
                <DataTemplate>
                    <Grid>
                        <!-- Display a new estimation bar at the position computed based on custom EstimatedStart property and bar left (Start) origin. -->
                        <Canvas Opacity="0.35">
                            <Grid Canvas.Left="{Binding ComputedEstimatedBarLeft}" Canvas.Top="-4" Width="{Binding ComputedEstimatedBarWidth}" Height="{Binding ComputedBarHeight}">
                                <Rectangle Fill="{Binding Path=(pdgcc:GanttChartView.StandardBarFill)}" StrokeDashArray="1" Stroke="{Binding Path=(pdgcc:GanttChartView.StandardBarStroke)}" StrokeThickness="{Binding GanttChartView.StandardBarStrokeThickness}" RadiusX="{Binding GanttChartView.StandardBarCornerRadius}" RadiusY="{Binding GanttChartView.StandardBarCornerRadius}"/>
                                <Rectangle Margin="1" Stroke="LightCyan" StrokeThickness="1" RadiusX="{Binding GanttChartView.StandardBarCornerRadius}" RadiusY="{Binding GanttChartView.StandardBarCornerRadius}"/>
                            </Grid>
                        </Canvas>
                        <Grid>
                            <!-- A dashed rectangle can be used to present the task area. -->
                            <Rectangle Stroke="{Binding Path=(pdgcc:GanttChartView.StandardBarStroke)}" StrokeThickness="{Binding GanttChartView.StandardBarStrokeThickness}" StrokeDashArray="2" RadiusX="{Binding GanttChartView.StandardBarCornerRadius}" RadiusY="{Binding GanttChartView.StandardBarCornerRadius}"/>
                            <!-- An items control can be used to display the custom interrupted task bars in the chart. -->
                            <ItemsControl ItemsSource="{Binding ComputedInterruptedBars}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Canvas>
                                            <Grid Canvas.Left="{Binding Left}" Width="{Binding Width}" Height="20">
                                                <!-- Corner radius values are set to a small value to generate less rounded rectangle corners. -->
                                                <Rectangle Fill="{Binding Path=Item.(pdgcc:GanttChartView.StandardBarFill)}" Stroke="{Binding Path=Item.(pdgcc:GanttChartView.StandardBarStroke)}" StrokeThickness="{Binding GanttChartView.StandardBarStrokeThickness}" RadiusX="{Binding GanttChartView.StandardBarCornerRadius}" RadiusY="{Binding GanttChartView.StandardBarCornerRadius}"/>
                                                <!-- Add a light cyan effect rectangle inside the task bar. -->
                                                <Rectangle Margin="1" Stroke="LightCyan" StrokeThickness="1" RadiusX="{Binding GanttChartView.StandardBarCornerRadius}" RadiusY="{Binding GanttChartView.StandardBarCornerRadius}"/>
                                            </Grid>
                                        </Canvas>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                            <pdgcc:DragTaskThumb Role="UpdateStart" Visibility="{Binding GanttChartView.ThumbVisibility}"/>
                            <pdgcc:DragTaskThumb Role="UpdateFinish" Width="2" HorizontalAlignment="Right" Visibility="{Binding GanttChartView.ThumbVisibility}"/>
                        </Grid>
                        <StackPanel Orientation="Horizontal" Margin="3,1">
                            <!-- An image can be used to display the custom icon on the task bar in the chart. -->
                            <Image Grid.Column="0" Source="{Binding Icon}" IsHitTestVisible="False"/>
                            <!-- A text box can be used to display and edit the name of the task on the task bar in the chart. -->
                            <TextBox Grid.Column="1" Text="{Binding Content, Mode=TwoWay}" FontFamily="Arial" FontSize="10" Padding="4" Foreground="White" Background="#80000000" BorderThickness="0"/>
                        </StackPanel>
                        <!-- An items control can be used to display the custom markers over the task bar in the chart. -->
                        <ItemsControl ItemsSource="{Binding Markers}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <Canvas>
                                        <Image Canvas.Left="{Binding ComputedLeft}" Source="{Binding Icon}" ToolTipService.ToolTip="{Binding Note}" Height="14" Margin="2"/>
                                    </Canvas>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                        <!-- A text block can be used to display the custom note under the task bar in the chart. -->
                        <Canvas>
                            <TextBlock Canvas.Top="20" Text="{Binding Note}" FontFamily="Arial" FontStyle="Italic" FontSize="10" Foreground="Gray"/>
                        </Canvas>
                    </Grid>
                </DataTemplate>
            </pdgcc:GanttChartDataGrid.StandardTaskTemplate>
            <pdgcc:GanttChartDataGrid.Columns>
                <pdgcc:DataGridColumnCollection>
                    <DataGridTemplateColumn>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Grid>
                                    <!-- Display an icon to represent the task item. -->
                                    <Image Source="Images/Task.Icon.png" Width="16" Height="16"/>
                                    <!-- Optionally, use a DragTaskThumb object with Role set to UpdateIndex to allow moving the task item in the hierarchy using drag and drop operations. -->
                                    <!-- Optionally, specify true for RoleParameter property of DragTaskThumb object to further encapsulate children when moving the task item in the hierarchy. -->
                                    <pdgcc:DragTaskThumb Role="UpdateIndex"/>
                                </Grid>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTextColumn Binding="{Binding IndexString}" IsReadOnly="True">
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="TextBlock">
                                <Setter Property="TextAlignment" Value="Right"/>
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>
                    <hdc:DataTreeGridColumn Header="Task" MinWidth="160"/>
                    <DataGridTemplateColumn Header="Start" MinWidth="140">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <ContentControl Content="{Binding Start, Converter={StaticResource DateTimeStringConverter}, ConverterParameter=g}" Padding="4"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>
                                <!-- Optionally use StartPreservingEffort property to also update task finish when end user changes start, preserving task effort and duration. -->
                                <DatePicker SelectedDate="{Binding Start, Mode=TwoWay}" IsEnabled="{Binding IsLeaf}" Padding="0"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellEditingTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="Effort" MinWidth="50">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <ContentControl Content="{Binding TotalEffort, Converter={StaticResource DurationStringConverter}, ConverterParameter=0.##h}" Padding="4"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>
                                <TextBox Text="{Binding TotalEffort, Converter={StaticResource DurationStringConverter}, ConverterParameter=0.##h, Mode=TwoWay}" IsReadOnly="{Binding HasChildren}" BorderThickness="0" Padding="0"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellEditingTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="Duration" MinWidth="50">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <!-- Optionally, use ConverterParameter=0.##d/8 for DurationStringConverter to display the value in working days of 8 hours.-->
                                <ContentControl Content="{Binding Duration, Converter={StaticResource DurationStringConverter}, ConverterParameter=0.##d/8}" Padding="4"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>
                                <TextBox Text="{Binding Duration, Converter={StaticResource DurationStringConverter}, ConverterParameter=0.##d/8, Mode=TwoWay}" IsReadOnly="{Binding HasChildren}" BorderThickness="0" Padding="0"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellEditingTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="Finish" MinWidth="140">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <ContentControl Content="{Binding Finish, Converter={StaticResource DateTimeStringConverter}, ConverterParameter=g}" Padding="4"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>
                                <!-- Optionally use FinishPreservingEffort property to also update task start when end user changes finish, preserving task effort and duration. -->
                                <DatePicker SelectedDate="{Binding Finish, Converter={StaticResource FinishDateConverter}, Mode=TwoWay}" IsEnabled="{Binding IsLeaf}" Padding="0"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellEditingTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="Milestone">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Name="TextBlock" Text="✓" Visibility="Hidden" HorizontalAlignment="Center" Padding="4,0,10,8"/>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding IsMilestone}" Value="True">
                                        <Setter TargetName="TextBlock" Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>
                                <CheckBox IsChecked="{Binding IsMilestone, Mode=TwoWay}" IsEnabled="{Binding IsLeaf}" VerticalAlignment="Center" HorizontalAlignment="Center" Padding="4"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellEditingTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="Compl.">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Name="TextBlock" Text="✓" Visibility="Hidden" HorizontalAlignment="Center" Padding="4,0,10,8"/>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding IsCompleted}" Value="True">
                                        <Setter TargetName="TextBlock" Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>
                                <CheckBox IsChecked="{Binding IsCompleted, Mode=TwoWay}" IsEnabled="{Binding IsLeaf}" VerticalAlignment="Center" HorizontalAlignment="Center" Padding="4"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellEditingTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="%" MinWidth="45">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <ContentControl Content="{Binding Completion, Converter={StaticResource NumberStringConverter}, ConverterParameter=0.##%}" Padding="4"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>
                                <TextBox Text="{Binding Completion, Converter={StaticResource NumberStringConverter}, ConverterParameter=0.##%, Mode=TwoWay}" IsReadOnly="{Binding HasChildren}" BorderThickness="0" Padding="0"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellEditingTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="Predecessors" MinWidth="80">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <!-- Optionally you may set GanttChartDataGrid.PredecessorsString{DependencyTypeAbbreviations|LagFormat|LagScale} properties to further control bound PredecessorsString values. -->
                                <ContentControl Content="{Binding PredecessorsString}" Padding="4"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>
                                <TextBox Text="{Binding PredecessorsString, Mode=TwoWay}" BorderThickness="0" Padding="0"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellEditingTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="Assignments" MinWidth="160">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <ContentControl Content="{Binding AssignmentsContent}" VerticalAlignment="Center" Padding="4"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>
                                <pdgcc:AssignmentComboBox AvailableItemsSource="{Binding AssignableResources, RelativeSource={RelativeSource AncestorType=pdgcc:GanttChartDataGrid}}" SelectedContent="{Binding AssignmentsContent, Mode=TwoWay}"/>
                                <!-- Alternatively you may use a simple editable ComboBox instead as indicated in the next line of markup. -->
                                <!-- <ComboBox ItemsSource="{Binding AssignableResources, RelativeSource={RelativeSource AncestorType=pdgcc:GanttChartDataGrid}}" Text="{Binding AssignmentsContent, Mode=TwoWay}" IsEditable="True"/> -->
                            </DataTemplate>
                        </DataGridTemplateColumn.CellEditingTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTextColumn Header="Cost" Binding="{Binding Cost, Converter={StaticResource NumberStringConverter}, ConverterParameter=$0.##}" MinWidth="80"/>
                    <DataGridTemplateColumn Header="Est. start" MinWidth="140">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <ContentControl Content="{Binding BaselineStart, Converter={StaticResource DateTimeStringConverter}, ConverterParameter=g}" Padding="4"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>
                                <DatePicker SelectedDate="{Binding BaselineStart, Mode=TwoWay}" Padding="0"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellEditingTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="Est. duration" MinWidth="50">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <ContentControl Content="{Binding BaselineEffort, Converter={StaticResource DurationStringConverter}, ConverterParameter=0.##h}" Padding="4"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>
                                <TextBox Text="{Binding BaselineEffort, Converter={StaticResource DurationStringConverter}, ConverterParameter=0.##h, Mode=TwoWay}" IsReadOnly="{Binding HasChildren}" BorderThickness="0" Padding="0"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellEditingTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="Est. finish" MinWidth="140">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <ContentControl Content="{Binding BaselineFinish, Converter={StaticResource DateTimeStringConverter}, ConverterParameter=g}" Padding="4"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>
                                <DatePicker SelectedDate="{Binding BaselineFinish, Converter={StaticResource FinishDateConverter}, Mode=TwoWay}" Padding="0"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellEditingTemplate>
                    </DataGridTemplateColumn>
                </pdgcc:DataGridColumnCollection>
            </pdgcc:GanttChartDataGrid.Columns>
            <pdgcc:GanttChartDataGrid.Items>
                <!-- Use a custom item that inherits from GanttChartItem (see code behind). -->
                <!-- Some item properties are set in code behind. -->
                <local:CustomGanttChartItem Content="Task 1"/>
                <local:CustomGanttChartItem Content="Task 1.1" Indentation="1"/>
                <local:CustomGanttChartItem Content="Task 1.2" Indentation="1"/>
                <local:CustomGanttChartItem Content="Task 2"/>
                <local:CustomGanttChartItem Content="Task 2.1" Indentation="1"/>
                <local:CustomGanttChartItem Content="Task 2.2" Indentation="1"/>
                <local:CustomGanttChartItem Content="Task 2.2.1" Indentation="2"/>
                <local:CustomGanttChartItem Content="Task 2.2.2" Indentation="2"/>
            </pdgcc:GanttChartDataGrid.Items>
        </pdgcc:GanttChartDataGrid>
    </DockPanel>
</Window>
